package com.happylife.core.service;

import com.happylife.core.common.token.Auth2TokenManager;
import com.happylife.core.exception.IdempotentException;

public interface IdempotentService {
    /**
     * create an unique token before calling an operation with the annotation AutoIdempotent
     * and put the token into redis
     * Here the mechanism used to generate token is different from the token generated by auth2 see {@link Auth2TokenManager}
     * I decided not to use auth2 mechanism to generate token is because:
     *  - auth2 mechanism is too heavy
     *  - we don't need to provide username and password when generating new token
     * @return
     */
    String createToken() throws IdempotentException;

    /**
     * verify if the idem_token exists in redis
     * any operations labelled with AutoIdempotent are allowed if token in request header doesn't exist in redis
     * @param idem_token
     * @return
     */
    boolean isExist(String idem_token) throws IdempotentException;

    /**
     * remove idem_token from redis if it exists in redis
     * this operation prevents us from doing the operations labelled with AutoIdempotent twice and more
     * @param idem_token
     * @throws IdempotentException
     */
    void remove(String idem_token) throws IdempotentException;
}
